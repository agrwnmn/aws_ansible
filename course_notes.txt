Notes for Automating Deployment in Amazon EC2 with Ansible

AWS access: 
    My Personal AWS login info
        user - agrw...
        pass - 1Net...

    New user AWS login info
        user - testuser
        access key ID - AKIASOADHDI7PQQSTBHW
        secret access key - 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

    New user2 AWS login info
        user - testuser1
        access key ID - AKIASOADHDI7IAUCDQRW
        secret access key - xLRtM1rmSGCT+eY3lwXf52+L1Lrf+nl2sZXIhUKU

When planning your AWS EC2 Deployment take the following in consideration:
    You will need to plan what resources you need and how to configure them for your deployment.
    This includes answering questions such as:
        What should your network configuration look like?
        How many instances of what types are required? 
        Can you use standard AMIs for those instances or do you need to customize them? 
        What sotrage do you need for your instances?
        What users, passwords or keys do you need to configure for access to the deployment? 

Preparing Ansible for use:
    Ensure that Ansible is installed
    Best practice is to setup Ansible on a control node OUTSIDE OF AWS so it can provision everything

Adding AWS module dependencies for AWS to use - There are 2 ways to do this. 
    If you have access to sudo you can do the following:
        sudo pip3 install ansible boto boto3
    If you don't have access to sudo you can do the following: 
        pip3 install boto3 --user
        pip3 install boto --user
    We also have to install the AWS galaxy collection to use the AWS Ansible Modules:
        ansible-galaxy collection install amazon.aws (side note. This is an easy way to install any packages you may need for ansible)

Create an AWS User and it's Access Key and Secret Key
    This shouldn't be your AWS accout root user!
    Create an individual IAM user for Ansible to use. This will allow you to limit how much access Ansible has to your accout and it's resources
    
    
